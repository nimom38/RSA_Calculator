{"ast":null,"code":"/* global BigInt */\nconst randojs = require(\"@nastyox/rando.js\");\n\nconst rando = randojs.rando;\nexport const initialState = {\n  p: \"0\",\n  q: \"0\",\n  n: \"0\",\n  phi: \"0\",\n  e: \"0\",\n  d: \"0\",\n  errorbag: []\n};\n\nconst power = (a, b, n) => {\n  [a, b, n] = [BigInt(a), BigInt(b), BigInt(n)];\n  let res = BigInt(1);\n  a %= n;\n\n  while (b > BigInt(0)) {\n    if (b & BigInt(1)) res = res * a % n;\n    b >>= BigInt(1);\n    a = a * a % n;\n  }\n\n  return res;\n};\n\nconst millerTest = (d, n) => {\n  [d, n] = [BigInt(d), BigInt(n)];\n  const a = BigInt(2) + BigInt(rando(100000000, 10000000000000000000000)) % (n - BigInt(4));\n  let p = power(a, d, n);\n  if (p === BigInt(1) || p === n - BigInt(1)) return true;\n\n  while (d !== n - BigInt(1)) {\n    p = p * p % n;\n    d *= BigInt(2);\n    if (p === BigInt(1)) return false;\n    if (p === n - BigInt(1)) return true;\n  }\n\n  return false;\n};\n\nconst checkPrime = n => {\n  n = BigInt(n);\n  if (n <= BigInt(1) || n === BigInt(4)) return false;\n  if (n <= BigInt(3)) return true;\n  let d = n - BigInt(1);\n\n  while (d % BigInt(2) === BigInt(0)) d /= BigInt(2);\n\n  for (var i = 0; i < 2000; ++i) {\n    if (!millerTest(d, n)) return false;\n  }\n\n  return true;\n};\n\nconst reducer = (state, action) => {\n  console.log(action);\n  console.log(state);\n\n  switch (action.type) {\n    case \"SET_P_AND_Q\":\n      {\n        const p = BigInt(action.item.p);\n        const q = BigInt(action.item.q);\n\n        if (!checkPrime(p) || !checkPrime(q)) {\n          return { ...state,\n            errorbag: [{\n              message: \"P and Q should be prime numbers.\"\n            }]\n          };\n        }\n\n        if (p * q <= 127) {\n          return { ...state,\n            errorbag: [{\n              message: \"P * Q is less than 127.\"\n            }]\n          };\n        }\n\n        const n = p * q;\n        const phi = (p - BigInt(1)) * (q - BigInt(1));\n        return { ...state,\n          p: p.toString(),\n          q: q.toString(),\n          n: n.toString(),\n          phi: phi.toString(),\n          errorbag: []\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/mnt/b37daa4f-64b1-411a-b35c-59820ce6f767/Documents/Projects/rsa-calculator/src/Reducer.js"],"names":["randojs","require","rando","initialState","p","q","n","phi","e","d","errorbag","power","a","b","BigInt","res","millerTest","checkPrime","i","reducer","state","action","console","log","type","item","message","toString"],"mappings":"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","sourcesContent":["/* global BigInt */\n\nconst randojs = require(\"@nastyox/rando.js\");\nconst rando = randojs.rando;\n\nexport const initialState = {\n  p: \"0\",\n  q: \"0\",\n  n: \"0\",\n  phi: \"0\",\n  e: \"0\",\n  d: \"0\",\n  errorbag: [],\n};\n\nconst power = (a, b, n) => {\n  [a, b, n] = [BigInt(a), BigInt(b), BigInt(n)];\n  let res = BigInt(1);\n  a %= n;\n  while (b > BigInt(0)) {\n    if (b & BigInt(1)) res = (res * a) % n;\n    b >>= BigInt(1);\n    a = (a * a) % n;\n  }\n  return res;\n};\n\nconst millerTest = (d, n) => {\n  [d, n] = [BigInt(d), BigInt(n)];\n  const a =\n    BigInt(2) +\n    (BigInt(rando(100000000, 10000000000000000000000)) % (n - BigInt(4)));\n  let p = power(a, d, n);\n  if (p === BigInt(1) || p === n - BigInt(1)) return true;\n\n  while (d !== n - BigInt(1)) {\n    p = (p * p) % n;\n    d *= BigInt(2);\n\n    if (p === BigInt(1)) return false;\n\n    if (p === n - BigInt(1)) return true;\n  }\n  return false;\n};\n\nconst checkPrime = (n) => {\n  n = BigInt(n);\n\n  if (n <= BigInt(1) || n === BigInt(4)) return false;\n  if (n <= BigInt(3)) return true;\n  let d = n - BigInt(1);\n\n  while (d % BigInt(2) === BigInt(0)) d /= BigInt(2);\n  for (var i = 0; i < 2000; ++i) {\n    if (!millerTest(d, n)) return false;\n  }\n  return true;\n};\n\nconst reducer = (state, action) => {\n  console.log(action);\n  console.log(state);\n  switch (action.type) {\n    case \"SET_P_AND_Q\": {\n      const p = BigInt(action.item.p);\n      const q = BigInt(action.item.q);\n      if (!checkPrime(p) || !checkPrime(q)) {\n        return {\n          ...state,\n          errorbag: [{ message: \"P and Q should be prime numbers.\" }],\n        };\n      }\n      if (p * q <= 127) {\n        return {\n          ...state,\n          errorbag: [{ message: \"P * Q is less than 127.\" }],\n        };\n      }\n      const n = p * q;\n      const phi = (p - BigInt(1)) * (q - BigInt(1));\n      return {\n        ...state,\n        p: p.toString(),\n        q: q.toString(),\n        n: n.toString(),\n        phi: phi.toString(),\n        errorbag: [],\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}