{"ast":null,"code":"/* global BigInt */\nconst randojs = require(\"@nastyox/rando.js\");\n\nconst rando = randojs.rando;\nexport const initialState = {\n  p: \"0\",\n  q: \"0\",\n  n: \"0\",\n  phi: \"0\",\n  e: \"0\",\n  d: \"0\",\n  errorbag: []\n};\n\nconst power = (a, b, n) => {\n  [a, b, n] = [BigInt(a), BigInt(b), BigInt(n)];\n  let res = BigInt(1);\n  a %= n;\n\n  while (b > BigInt(0)) {\n    if (b & BigInt(1)) res = res * a % n;\n    b >>= BigInt(1);\n    a = a * a % n;\n  }\n\n  return res;\n};\n\nfunction modInverse(a, m) {\n  [a, m] = [BigInt(a), BigInt(m)];\n  a = (a % m + m) % m;\n\n  if (!a || m < BigInt(2)) {\n    return NaN; // invalid input\n  } // find the gcd\n\n\n  const s = [];\n  let b = m;\n\n  while (b) {\n    [a, b] = [b, a % b];\n    s.push({\n      a,\n      b\n    });\n  }\n\n  if (a !== BigInt(1)) {\n    return NaN; // inverse does not exists\n  } // find the inverse\n\n\n  let x = BigInt(1);\n  let y = BigInt(0);\n\n  for (let i = s.length - 2; i >= 0; --i) {\n    [x, y] = [y, x - y * Math.floor(s[i].a / s[i].b)];\n  }\n\n  return (y % m + m) % m;\n}\n\nconst millerTest = (d, n) => {\n  [d, n] = [BigInt(d), BigInt(n)];\n  const a = BigInt(2) + BigInt(rando(100000000, 10000000000000000000000)) % (n - BigInt(4));\n  let p = power(a, d, n);\n  if (p === BigInt(1) || p === n - BigInt(1)) return true;\n\n  while (d !== n - BigInt(1)) {\n    p = p * p % n;\n    d *= BigInt(2);\n    if (p === BigInt(1)) return false;\n    if (p === n - BigInt(1)) return true;\n  }\n\n  return false;\n};\n\nconst checkPrime = n => {\n  n = BigInt(n);\n  if (n <= BigInt(1) || n === BigInt(4)) return false;\n  if (n <= BigInt(3)) return true;\n  let d = n - BigInt(1);\n\n  while (d % BigInt(2) === BigInt(0)) d /= BigInt(2);\n\n  for (var i = 0; i < 2000; ++i) {\n    if (!millerTest(d, n)) return false;\n  }\n\n  return true;\n};\n\nconst gcd = (a, b) => {\n  [a, b] = [BigInt(a), BigInt(b)];\n  if (a === BigInt(0)) return b;\n  if (b === BigInt(0)) return a;\n  return gcd(b, a % b);\n};\n\nconst reducer = (state, action) => {\n  console.log(action);\n  console.log(state);\n\n  switch (action.type) {\n    case \"SET_P_AND_Q\":\n      {\n        const p = BigInt(action.item.p);\n        const q = BigInt(action.item.q);\n\n        if (!checkPrime(p) || !checkPrime(q)) {\n          return { ...state,\n            errorbag: [{\n              message: \"P and Q should be prime numbers.\"\n            }]\n          };\n        }\n\n        if (p * q <= 127) {\n          return { ...state,\n            errorbag: [{\n              message: \"P * Q is less than 127.\"\n            }]\n          };\n        }\n\n        const n = p * q;\n        const phi = (p - BigInt(1)) * (q - BigInt(1));\n        return { ...state,\n          p: p.toString(),\n          q: q.toString(),\n          n: n.toString(),\n          phi: phi.toString(),\n          errorbag: []\n        };\n      }\n\n    case \"SET_E\":\n      {\n        const e = BigInt(action.item.e);\n\n        if (e <= 1 || e >= BigInt(state.phi)) {\n          return { ...state,\n            errorbag: [{\n              message: \"e must be greater than 1 and less than phi.\"\n            }]\n          };\n        }\n\n        if (gcd(e, state.phi) !== BigInt(1)) {\n          return { ...state,\n            errorbag: [{\n              message: \"The gcd of e and phi is not 1.\"\n            }]\n          };\n        }\n\n        const d = BigInt(modInverse(e, state.phi));\n        return { ...state,\n          e: e.toString(),\n          d: d.toString(),\n          errorbag: []\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/mnt/b37daa4f-64b1-411a-b35c-59820ce6f767/Documents/Projects/rsa-calculator/src/Reducer.js"],"names":["randojs","require","rando","initialState","p","q","n","phi","e","d","errorbag","power","a","b","BigInt","res","modInverse","m","NaN","s","push","x","y","i","length","Math","floor","millerTest","checkPrime","gcd","reducer","state","action","console","log","type","item","message","toString"],"mappings":"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","sourcesContent":["/* global BigInt */\n\nconst randojs = require(\"@nastyox/rando.js\");\nconst rando = randojs.rando;\n\nexport const initialState = {\n  p: \"0\",\n  q: \"0\",\n  n: \"0\",\n  phi: \"0\",\n  e: \"0\",\n  d: \"0\",\n  errorbag: [],\n};\n\nconst power = (a, b, n) => {\n  [a, b, n] = [BigInt(a), BigInt(b), BigInt(n)];\n  let res = BigInt(1);\n  a %= n;\n  while (b > BigInt(0)) {\n    if (b & BigInt(1)) res = (res * a) % n;\n    b >>= BigInt(1);\n    a = (a * a) % n;\n  }\n  return res;\n};\n\nfunction modInverse(a, m) {\n  [a, m] = [BigInt(a), BigInt(m)];\n\n  a = ((a % m) + m) % m;\n  if (!a || m < BigInt(2)) {\n    return NaN; // invalid input\n  }\n  // find the gcd\n  const s = [];\n  let b = m;\n  while (b) {\n    [a, b] = [b, a % b];\n    s.push({ a, b });\n  }\n  if (a !== BigInt(1)) {\n    return NaN; // inverse does not exists\n  }\n  // find the inverse\n  let x = BigInt(1);\n  let y = BigInt(0);\n  for (let i = s.length - 2; i >= 0; --i) {\n    [x, y] = [y, x - y * Math.floor(s[i].a / s[i].b)];\n  }\n  return ((y % m) + m) % m;\n}\n\nconst millerTest = (d, n) => {\n  [d, n] = [BigInt(d), BigInt(n)];\n  const a =\n    BigInt(2) +\n    (BigInt(rando(100000000, 10000000000000000000000)) % (n - BigInt(4)));\n  let p = power(a, d, n);\n  if (p === BigInt(1) || p === n - BigInt(1)) return true;\n\n  while (d !== n - BigInt(1)) {\n    p = (p * p) % n;\n    d *= BigInt(2);\n\n    if (p === BigInt(1)) return false;\n\n    if (p === n - BigInt(1)) return true;\n  }\n  return false;\n};\n\nconst checkPrime = (n) => {\n  n = BigInt(n);\n\n  if (n <= BigInt(1) || n === BigInt(4)) return false;\n  if (n <= BigInt(3)) return true;\n  let d = n - BigInt(1);\n\n  while (d % BigInt(2) === BigInt(0)) d /= BigInt(2);\n  for (var i = 0; i < 2000; ++i) {\n    if (!millerTest(d, n)) return false;\n  }\n  return true;\n};\n\nconst gcd = (a, b) => {\n  [a, b] = [BigInt(a), BigInt(b)];\n  if (a === BigInt(0)) return b;\n  if (b === BigInt(0)) return a;\n  return gcd(b, a % b);\n};\n\nconst reducer = (state, action) => {\n  console.log(action);\n  console.log(state);\n  switch (action.type) {\n    case \"SET_P_AND_Q\": {\n      const p = BigInt(action.item.p);\n      const q = BigInt(action.item.q);\n      if (!checkPrime(p) || !checkPrime(q)) {\n        return {\n          ...state,\n          errorbag: [{ message: \"P and Q should be prime numbers.\" }],\n        };\n      }\n      if (p * q <= 127) {\n        return {\n          ...state,\n          errorbag: [{ message: \"P * Q is less than 127.\" }],\n        };\n      }\n      const n = p * q;\n      const phi = (p - BigInt(1)) * (q - BigInt(1));\n      return {\n        ...state,\n        p: p.toString(),\n        q: q.toString(),\n        n: n.toString(),\n        phi: phi.toString(),\n        errorbag: [],\n      };\n    }\n    case \"SET_E\": {\n      const e = BigInt(action.item.e);\n\n      if (e <= 1 || e >= BigInt(state.phi)) {\n        return {\n          ...state,\n          errorbag: [\n            { message: \"e must be greater than 1 and less than phi.\" },\n          ],\n        };\n      }\n\n      if (gcd(e, state.phi) !== BigInt(1)) {\n        return {\n          ...state,\n          errorbag: [{ message: \"The gcd of e and phi is not 1.\" }],\n        };\n      }\n\n      const d = BigInt(modInverse(e, state.phi));\n\n      return {\n        ...state,\n        e: e.toString(),\n        d: d.toString(),\n        errorbag: [],\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}