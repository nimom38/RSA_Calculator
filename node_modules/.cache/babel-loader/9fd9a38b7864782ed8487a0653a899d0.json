{"ast":null,"code":"import _objectSpread from\"/mnt/b37daa4f-64b1-411a-b35c-59820ce6f767/Documents/Projects/rsa-calculator/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";/* global BigInt */var randojs=require(\"@nastyox/rando.js\");var rando=randojs.rando;export var initialState={p:\"0\",q:\"0\",n:\"0\",phi:\"0\",e:\"0\",d:\"0\",cipher:\"\",message:\"\",errorbag:[]};var power=function power(a,b,n){var _ref=[BigInt(a),BigInt(b),BigInt(n)];a=_ref[0];b=_ref[1];n=_ref[2];var res=BigInt(1);a%=n;while(b>BigInt(0)){if(b&BigInt(1))res=res*a%n;b>>=BigInt(1);a=a*a%n;}return res;};function modInverse(a,m){var _ref2=[BigInt(a),BigInt(m)];a=_ref2[0];m=_ref2[1];a=(a%m+m)%m;if(!a||m<BigInt(2)){return NaN;// invalid input\n}// find the gcd\nvar s=[];var b=m;while(b){var _ref3=[b,a%b];a=_ref3[0];b=_ref3[1];s.push({a:a,b:b});}if(a!==BigInt(1)){return NaN;// inverse does not exists\n}// find the inverse\nvar x=BigInt(1);var y=BigInt(0);for(var i=s.length-2;i>=0;--i){var _ref4=[y,x-y*(s[i].a/s[i].b)];x=_ref4[0];y=_ref4[1];}return(y%m+m)%m;}var millerTest=function millerTest(d,n){var _ref5=[BigInt(d),BigInt(n)];d=_ref5[0];n=_ref5[1];var a=BigInt(2)+BigInt(rando(100000000,10000000000000000000000))%(n-BigInt(4));var p=power(a,d,n);if(p===BigInt(1)||p===n-BigInt(1))return true;while(d!==n-BigInt(1)){p=p*p%n;d*=BigInt(2);if(p===BigInt(1))return false;if(p===n-BigInt(1))return true;}return false;};var checkPrime=function checkPrime(n){n=BigInt(n);if(n<=BigInt(1)||n===BigInt(4))return false;if(n<=BigInt(3))return true;var d=n-BigInt(1);while(d%BigInt(2)===BigInt(0)){d/=BigInt(2);}for(var i=0;i<2000;++i){if(!millerTest(d,n))return false;}return true;};var gcd=function gcd(a,b){var _ref6=[BigInt(a),BigInt(b)];a=_ref6[0];b=_ref6[1];if(a===BigInt(0))return b;if(b===BigInt(0))return a;return gcd(b,a%b);};var encryptMessage=function encryptMessage(message,e,n,phi){var _ref7=[BigInt(e),BigInt(n)];e=_ref7[0];n=_ref7[1];if(e<=BigInt(1)||e>=BigInt(phi))return\"\";if(n<=BigInt(127))return\"\";var cipher=[];for(var i=0;i<message.length;++i){var character=BigInt(message.charCodeAt(i));var encrypted=power(character,e,n);cipher.push(encrypted.toString());}return String.fromCharCode.apply(String,cipher);};var decryptCipher=function decryptCipher(cipher,d,n){var _ref8=[BigInt(d),BigInt(n)];d=_ref8[0];n=_ref8[1];if(d<=BigInt(0))return\"\";if(n<=BigInt(127))return\"\";var originalMessage=[];for(var i=0;i<cipher.length;++i){var character=BigInt(cipher.charCodeAt(i));var decrypted=power(character,d,n);originalMessage.push(decrypted.toString());}return String.fromCharCode.apply(String,originalMessage);};var reducer=function reducer(state,action){console.log(action);console.log(state);switch(action.type){case\"SET_P_AND_Q\":{var p=BigInt(action.item.p);var q=BigInt(action.item.q);if(!checkPrime(p)||!checkPrime(q)){return _objectSpread(_objectSpread({},state),{},{errorbag:[{message:\"P and Q should be prime numbers.\"}]});}if(p*q<=127){return _objectSpread(_objectSpread({},state),{},{errorbag:[{message:\"P * Q is less than 127.\"}]});}var n=p*q;var phi=(p-BigInt(1))*(q-BigInt(1));return _objectSpread(_objectSpread({},state),{},{p:p.toString(),q:q.toString(),n:n.toString(),phi:phi.toString(),errorbag:[]});}case\"SET_E\":{var e=BigInt(action.item.e);if(e<=1||e>=BigInt(state.phi)){return _objectSpread(_objectSpread({},state),{},{errorbag:[{message:\"e must be greater than 1 and less than phi.\"}]});}if(gcd(e,state.phi)!==BigInt(1)){return _objectSpread(_objectSpread({},state),{},{errorbag:[{message:\"The gcd of e and phi is not 1.\"}]});}var d=BigInt(modInverse(e,state.phi));return _objectSpread(_objectSpread({},state),{},{e:e.toString(),d:d.toString(),errorbag:[]});}case\"Encrypt\":{var message=action.item.message;var cipher=encryptMessage(message,state.e,state.n,state.phi);console.log(cipher);return _objectSpread(_objectSpread({},state),{},{cipher:cipher,errorbag:[]});}case\"Decrypt\":{var _cipher=action.item.cipher;var _message=decryptCipher(_cipher,state.d,state.n);return _objectSpread(_objectSpread({},state),{},{message:_message,errorbag:[]});}default:return state;}};export default reducer;","map":{"version":3,"sources":["/mnt/b37daa4f-64b1-411a-b35c-59820ce6f767/Documents/Projects/rsa-calculator/src/Reducer.js"],"names":["randojs","require","rando","initialState","p","q","n","phi","e","d","cipher","message","errorbag","power","a","b","BigInt","res","modInverse","m","NaN","s","push","x","y","i","length","millerTest","checkPrime","gcd","encryptMessage","character","charCodeAt","encrypted","toString","String","fromCharCode","decryptCipher","originalMessage","decrypted","reducer","state","action","console","log","type","item"],"mappings":"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","sourcesContent":["/* global BigInt */\n\nconst randojs = require(\"@nastyox/rando.js\");\nconst rando = randojs.rando;\n\nexport const initialState = {\n  p: \"0\",\n  q: \"0\",\n  n: \"0\",\n  phi: \"0\",\n  e: \"0\",\n  d: \"0\",\n  cipher: \"\",\n  message: \"\",\n  errorbag: [],\n};\n\nconst power = (a, b, n) => {\n  [a, b, n] = [BigInt(a), BigInt(b), BigInt(n)];\n  let res = BigInt(1);\n  a %= n;\n  while (b > BigInt(0)) {\n    if (b & BigInt(1)) res = (res * a) % n;\n    b >>= BigInt(1);\n    a = (a * a) % n;\n  }\n  return res;\n};\n\nfunction modInverse(a, m) {\n  [a, m] = [BigInt(a), BigInt(m)];\n\n  a = ((a % m) + m) % m;\n  if (!a || m < BigInt(2)) {\n    return NaN; // invalid input\n  }\n  // find the gcd\n  const s = [];\n  let b = m;\n  while (b) {\n    [a, b] = [b, a % b];\n    s.push({ a, b });\n  }\n  if (a !== BigInt(1)) {\n    return NaN; // inverse does not exists\n  }\n  // find the inverse\n  let x = BigInt(1);\n  let y = BigInt(0);\n  for (let i = s.length - 2; i >= 0; --i) {\n    [x, y] = [y, x - y * (s[i].a / s[i].b)];\n  }\n  return ((y % m) + m) % m;\n}\n\nconst millerTest = (d, n) => {\n  [d, n] = [BigInt(d), BigInt(n)];\n  const a =\n    BigInt(2) +\n    (BigInt(rando(100000000, 10000000000000000000000)) % (n - BigInt(4)));\n  let p = power(a, d, n);\n  if (p === BigInt(1) || p === n - BigInt(1)) return true;\n\n  while (d !== n - BigInt(1)) {\n    p = (p * p) % n;\n    d *= BigInt(2);\n\n    if (p === BigInt(1)) return false;\n\n    if (p === n - BigInt(1)) return true;\n  }\n  return false;\n};\n\nconst checkPrime = (n) => {\n  n = BigInt(n);\n\n  if (n <= BigInt(1) || n === BigInt(4)) return false;\n  if (n <= BigInt(3)) return true;\n  let d = n - BigInt(1);\n\n  while (d % BigInt(2) === BigInt(0)) d /= BigInt(2);\n  for (var i = 0; i < 2000; ++i) {\n    if (!millerTest(d, n)) return false;\n  }\n  return true;\n};\n\nconst gcd = (a, b) => {\n  [a, b] = [BigInt(a), BigInt(b)];\n  if (a === BigInt(0)) return b;\n  if (b === BigInt(0)) return a;\n  return gcd(b, a % b);\n};\n\nconst encryptMessage = (message, e, n, phi) => {\n  [e, n] = [BigInt(e), BigInt(n)];\n\n  if (e <= BigInt(1) || e >= BigInt(phi)) return \"\";\n  if (n <= BigInt(127)) return \"\";\n\n  const cipher = [];\n\n  for (var i = 0; i < message.length; ++i) {\n    const character = BigInt(message.charCodeAt(i));\n    const encrypted = power(character, e, n);\n    cipher.push(encrypted.toString());\n  }\n  return String.fromCharCode(...cipher);\n};\n\nconst decryptCipher = (cipher, d, n) => {\n  [d, n] = [BigInt(d), BigInt(n)];\n\n  if (d <= BigInt(0)) return \"\";\n  if (n <= BigInt(127)) return \"\";\n\n  const originalMessage = [];\n\n  for (var i = 0; i < cipher.length; ++i) {\n    const character = BigInt(cipher.charCodeAt(i));\n    const decrypted = power(character, d, n);\n    originalMessage.push(decrypted.toString());\n  }\n  return String.fromCharCode(...originalMessage);\n};\n\nconst reducer = (state, action) => {\n  console.log(action);\n  console.log(state);\n  switch (action.type) {\n    case \"SET_P_AND_Q\": {\n      const p = BigInt(action.item.p);\n      const q = BigInt(action.item.q);\n      if (!checkPrime(p) || !checkPrime(q)) {\n        return {\n          ...state,\n          errorbag: [{ message: \"P and Q should be prime numbers.\" }],\n        };\n      }\n      if (p * q <= 127) {\n        return {\n          ...state,\n          errorbag: [{ message: \"P * Q is less than 127.\" }],\n        };\n      }\n      const n = p * q;\n      const phi = (p - BigInt(1)) * (q - BigInt(1));\n      return {\n        ...state,\n        p: p.toString(),\n        q: q.toString(),\n        n: n.toString(),\n        phi: phi.toString(),\n        errorbag: [],\n      };\n    }\n    case \"SET_E\": {\n      const e = BigInt(action.item.e);\n\n      if (e <= 1 || e >= BigInt(state.phi)) {\n        return {\n          ...state,\n          errorbag: [\n            { message: \"e must be greater than 1 and less than phi.\" },\n          ],\n        };\n      }\n\n      if (gcd(e, state.phi) !== BigInt(1)) {\n        return {\n          ...state,\n          errorbag: [{ message: \"The gcd of e and phi is not 1.\" }],\n        };\n      }\n\n      const d = BigInt(modInverse(e, state.phi));\n\n      return {\n        ...state,\n        e: e.toString(),\n        d: d.toString(),\n        errorbag: [],\n      };\n    }\n    case \"Encrypt\": {\n      const message = action.item.message;\n      const cipher = encryptMessage(message, state.e, state.n, state.phi);\n\n      console.log(cipher);\n\n      return {\n        ...state,\n        cipher,\n        errorbag: [],\n      };\n    }\n    case \"Decrypt\": {\n      const cipher = action.item.cipher;\n      const message = decryptCipher(cipher, state.d, state.n);\n\n      return {\n        ...state,\n        message,\n        errorbag: [],\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}